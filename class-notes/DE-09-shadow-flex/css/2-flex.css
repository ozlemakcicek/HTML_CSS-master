.container1{
    background-color: antiquewhite;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    justify-content: flex-start;
    /* flex-start ile basa yapistirir */
    justify-content: flex-end;
    justify-content: space-between;
    justify-content: space-around;
    /* basa sona da bosluk verir ve oyle aralarina bosluk birakir am,a between e gore daha az kalir aralik px i */
    justify-content: space-evenly;
}



    /*! Yatay Hizalama: Justify-center
      /**  /** flex-start: Nesneler kapsayıcının başından başlayarak dizilirler.*/
        /** space-evenly:neseneler arası, en baş ve son eşit boşluk */
        /**space-around: Nesneler arasında eşit boşluklar bırakılır, başa sona yarım boşluk.
      /**space-between: İlk nesne başta, son nesne sonda olacak şekilde nesneler eşit olarak kapsayıcının içerisinde dizilirler.
      /**center: Nesneler tam ortalı olacak şekilde hizalanır.
      /**flex-end: Son nesne ve diğerleri en sağa yaslanacak şekilde hizalanır. */

/* flex kullandığımızda elemanlar ekran küçüldükçe sıkışır, alta düşmez bu yüzden, wrap:browser küçüldükçe ekrana sığamayan elementler alt satıra geçsin.
wrap-reverse sığmayan elementleri ters çevirir ve öyle alt satıra indirir */


.container1 div{
    background-color: tomato;
    width: 5rem;
    height: 5rem;
    /* margin: 1rem; */
    text-align: center;
}

/* ? ***************** */

.container2{
    background-color: pink;
    display: flex;
    height: 20rem;
    /* height asagidaki stretchin calismasi icin kapanmali */
    /* dikeyde ortalamayi gormek icin bi height verdik */
    justify-content: flex-end;
    align-items: center;
    align-items: flex-end;
    /* align-items: stretch; */
    /* stretch height varsa calismaz.otomatik kendisi asilip heighta kadar uzatir */
    /* stretch kullanabilmek için child div lere height verilmemiş olmalı */
    align-items: baseline;
    /* icerideki icerigi tekbir hizaya getiriyor */

    /*! Dikey Hizalama => align-items
      /**flex-start: Nesneler, kapsayıcının en üstünden başlayarak dizilirler.
    /**flex-end: Nesneler, kapsayıcının en altından başlayarak, yukarı doğru dizilirler.
    /**center: Nesneler ortalı bir şekilde dikey olarak sıralanırlar.
    /**baseline: yazıların yerine bakılır, sıradanlığı bozan yazı tipi göz önüne alınarak hizalanmaya başlanılır.
    /**stretch: Tüm nesneler kapsayıcı yüksekliğine eşit olacak şekilde dizilirler eger özel height lari yoksa.*/
}

.container2 div{
    background-color: cornflowerblue;
    width: 5rem;
    height: 10rem;
}
.container2 div:nth-child(1){
    height: 5rem;
}
.container2 div:nth-child(2) {
    padding: 4rem;
}
.container2 div:nth-child(3) {
    height: 2rem;
    padding: 5rem 0;
    font-size: 5rem;
}

/* ul lerde il bastaki noktadan kaynakli basta fazla bir bosluk varmis gibi gelir.ama aslinda o fazlalik noktaya ait */
ul {
background-color: darkgray;
height: 30rem;
list-style-type: none;
display: flex;
justify-content: space-around;
flex-wrap: wrap;
align-items: flex-start;
align-content: flex-start;
gap: 4rem 2rem;
/* /*?gap, flex içerisindeki elemanların dikey ve 
yatay boşluklarını belirlemek için kullanılabilir.
 ilk yazılan  (satırlar arası yukarı aşağı) boşluk, 2. yazılan ise  (sutunlar arası, sağ sol) boşluktur */ */

}
ul li{
    background-color: violet;
width: 4rem;
height: 5rem;
text-align: center;
/* margin: 1rem; */
/* margin vermek aralarini acmak icin li de ise yarar ama herseyde ise yarayan bir kod var.gap komutunu papaya veriyorsun */

}




/* ? *********************** */

.container4{
    background-color: brown;
    padding: 1rem 0;
    display: flex;

}
.container4 div{
    background-color: yellow;
    width: 5rem;
    margin: 1rem;
}

.grow1{
    flex-grow:1;
    /* baba da flex ozelligi verilen cocuklara ayri ayri ozellikler vermek istersek bunu kendi iclerinde yapiyoruz.
    basina flex- ifadesini getirerek */
}
.grow2 {
    flex-grow: 2;}
    

  .grow3 {
      flex-grow: 3;
  }

  .grow4 {
      flex-grow: 0;
      /* baba da width ini 5rem verdik ona gore buyutur .ekrani actikca gozukur*/

      /* flex-grow: degerine verdigimiz rakamlarin anlami su;ana rem ne ise onu hepsi alir sonra da arta kalan ekrani 1,2,3 gibi rakamlarina gore paylasiyorlar*/
  }


/*  

  .grow1 {
      flex-grow: 1; }

      /*  default büyüme olsun x+x
 

  .grow2 {flex-grow: 2;}
     grow2 classindakiler diğerlerine göre 2 kat daha fazla büyüyebilir. x+2x*/
      

  
/*  
  .grow3 { flex-grow: 3;  }
      /*? grow3 classindakiler diğerlerine göre 3 kat daha fazla büyüyebilir. x+3x*/
     

*/

/* 
  .grow4 {
      /*? nogrow classindakiler diğerlerine göre hiç büyümezler*/
      flex-grow: 0;}

  */ */